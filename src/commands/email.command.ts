import { Context, Markup, Telegraf } from 'telegraf';
import { Command } from './command.class';
import { IBotContext } from '../context/context.interface';
import { AuthCommand } from './auth.command';

export class EmailCommand extends Command {
	constructor(bot: Telegraf<IBotContext>) {
		super(bot);
	}

	handle(): void {
		this.bot.command('email', (ctx) => {
			if(ctx.session.email){
				ctx.reply(`‚ö° –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–∞—è Google-–ø–æ—á—Ç–∞:\n\n‚Üí ${ctx.session.email}\n\n–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ - –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—á—Ç—É:`, {
					reply_markup: {
						inline_keyboard: [
							[ { text: '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start_back' } ]
						]
					}
				});
			} else {
				ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É Google-–ø–æ—á—Ç—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Google-—Ç–∞–±–ª–∏—Ü–∞–º:');
			}
			this.email(ctx);
		});
		this.bot.action('email_inline', (ctx) => {
			if(ctx.session.email){
				ctx.editMessageText(`‚ö° –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–∞—è Google-–ø–æ—á—Ç–∞:\n\n‚Üí ${ctx.session.email}\n\n–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ - –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—á—Ç—É:`, {
					reply_markup: {
						inline_keyboard: [
							[ { text: '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start_back' } ]
						]
					}
				});
			} else {
				ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É Google-–ø–æ—á—Ç—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Google-—Ç–∞–±–ª–∏—Ü–∞–º:');
			}
			this.email(ctx);
		});
	}

	email(ctx: IBotContext): void {
		try {
			this.bot.hears(/.*?/, async (ctx) => {
				const email = ctx.update.message.text;
				if(this.validateEmail(email)) {
					ctx.reply(`–í–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å Google-–ø–æ—á—Ç—ã:\n\n‚Üí ${ctx.update.message.text}\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?`, Markup.inlineKeyboard([
						Markup.button.callback('–ü–æ—Ç–¥–≤–µ—Ä–¥–∏—Ç—å ‚úÖ', 'start_back'),
						Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å ‚Ü©Ô∏è', 'restart')
					]));
					ctx.session.email = ctx.update.message.text;
				} else {
					ctx.reply('–ü–æ—Ö–æ–∂–µ –≤–∞—à–∞ –ø–æ—á—Ç–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ü§®\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –≤–∞—à–µ–≥–æ Gmail-–∞–∫–∫–∞—É–Ω—Ç–∞');
					this.email(ctx);
				}
				
			});

			this.bot.action('restart', (ctx) => {
				this.email(ctx);
			});
				
		} catch (error) {
			throw new Error('–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã email');
		}
	}
	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
    validateEmail(email: string): boolean {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        const GMAIL_REGEX = /^[^\s@]+@gmail\.com$/;
        return GMAIL_REGEX.test(email);
    }
}