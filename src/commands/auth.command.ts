import { Telegraf } from 'telegraf';
import { Command } from './command.class';
import { IBotContext } from '../context/context.interface';
import { EmailCommand } from './email.command';

export class AuthCommand extends Command {
	
	constructor(bot: Telegraf<IBotContext>) {
		super(bot);
	}
	emailCommand: EmailCommand;
	public settings: string = '';

	handle(): void {
		this.bot.action('auth_inline', (ctx: IBotContext) => {
			this.convertSettingEmail(ctx);
		})
		this.bot.action('apply_email', async (ctx) => {
			this.convertSettingsTo(ctx);
		})
	}

	convertSettingEmail(ctx: IBotContext) {
		ctx.session.email = '';
		ctx.session.url = '';
		ctx.session.convert_to = '';
		ctx.session.convert_type = '';
		ctx.session.convert_settings = '';
		ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É')
		this.bot.hears(/^[^\s@]+@gmail\.com$/, async (ctx) => {
			const email = ctx.update.message.text;
			if(this.validateEmail(email)) {
				ctx.reply(`–í–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å Google-–ø–æ—á—Ç—ã: ${ctx.update.message.text}\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?`, {
					reply_markup: {
						inline_keyboard: [
							[{ text: '–ü–æ—Ç–¥–≤–µ—Ä–¥–∏—Ç—å ‚úÖ', callback_data: 'apply_email' }, { text: '–ò–∑–º–µ–Ω–∏—Ç—å ‚Ü©Ô∏è', callback_data: 'restart' }]
						]
					}
				});
				ctx.session.email = ctx.update.message.text;
			} else {
				ctx.reply('–ü–æ—Ö–æ–∂–µ –≤–∞—à–∞ –ø–æ—á—Ç–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ü§®\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –≤–∞—à–µ–≥–æ Gmail-–∞–∫–∫–∞—É–Ω—Ç–∞');
				this.convertSettingEmail(ctx);
			}
		})

		this.bot.action('apply_email', async (ctx) => {
			this.convertSettingsTo(ctx);
		})

		this.bot.action('restart', async (ctx) => {
			this.convertSettingEmail(ctx);
		})
	}

	convertSettingsTo(ctx: IBotContext) {
		this.checkSettings(ctx);
		ctx.editMessageText(`${this.settings}–í –∫–∞–∫—É—é —Ç–∞–±–ª–∏—Ü—É –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤—ã–≥—Ä—É–∑–∫–∞ CSV-—Ñ–∞–π–ª–∞`, {
			reply_markup: {
				inline_keyboard: [
					[{ text: '–ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞', callback_data: 'new_table'}],
					[{ text: '–ú–æ—è —Ç–∞–±–ª–∏—Ü–∞(–¥–æ–±–∞–≤–∏—Ç—å)', callback_data: 'exist_table'}],
				]
			}
		})

		this.bot.action('new_table', async (ctx) => {
			ctx.session.convert_to = '–ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞';
			this.convertSettings(ctx);
		}) 

		this.bot.action('exist_table', async (ctx) => {
			ctx.session.convert_to = '–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞';
			ctx.editMessageText('–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã');
			this.bot.hears(/https:\/\/docs\.google\.com\/spreadsheets\/d\/([a-zA-Z0-9-_]+)\/edit/, async (ctx) => {
				const urlParts = ctx.update.message.text.split('/');
				ctx.session.url = ctx.update.message.text;
				const spreadsheetId = urlParts[urlParts.length - 2];
				ctx.reply(`–í–∞—à URL: https://docs.google.com/spreadsheets/d/${spreadsheetId}/edit`)
				
				this.convertSettings(ctx);
			})
		}) 

	}

	convertSettings(ctx: IBotContext) {
		this.checkSettings(ctx);
		ctx.reply(`${this.settings}–ö–∞–∫—É—é –≤—ã–±–æ—Ä–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –≤—ã–≥—Ä—É–∑–∫–µ?`, {
			reply_markup: {
				inline_keyboard: [
					[{ text: '–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è', callback_data: 'safe'}],
					[{ text: '–ü–æ–ª–Ω–∞—è', callback_data: 'unsafe'}],
					// [{ text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è', callback_data: 'custom'}]
				]
			}
		})

		this.bot.action('safe', async(ctx) => {
			ctx.session.convert_settings = '–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è';
			this.checkSettings(ctx);
			ctx.editMessageText(`–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n${this.settings}`, {
				reply_markup: {
					inline_keyboard: [
						[{ text: '–ü–æ—Ç–¥–≤–µ—Ä–¥–∏—Ç—å ‚úÖ', callback_data: 'start' }, { text: '–ò–∑–º–µ–Ω–∏—Ç—å ‚Ü©Ô∏è', callback_data: 'restart' }]
					]
				}
			})
		})
		
		this.bot.action('safe', async(ctx) => {
			ctx.session.convert_settings = '–ü–æ–ª–Ω–∞—è';
			this.checkSettings(ctx);
			ctx.editMessageText(`–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n${this.settings}`, {
				reply_markup: {
					inline_keyboard: [
						[{ text: '–ü–æ—Ç–¥–≤–µ—Ä–¥–∏—Ç—å ‚úÖ', callback_data: 'start' }, { text: '–ò–∑–º–µ–Ω–∏—Ç—å ‚Ü©Ô∏è', callback_data: 'restart' }]
					]
				}
			})
		})
	}

	validateEmail(email: string): boolean {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        const GMAIL_REGEX = /^[^\s@]+@gmail\.com$/;
        return GMAIL_REGEX.test(email);
    }

	checkSettings(ctx: IBotContext) {
		if(ctx.session.convert_to === '–ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞') {
			this.settings = `üì• –í–∞—à–∞ –ø–æ—á—Ç–∞:\n‚Üí ${ctx.session.email}\n`+
		`#Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É:\n‚Üí ${ctx.session.convert_to}\n`+
		`#Ô∏è‚É£ –í—ã–±–æ—Ä–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏:\n‚Üí ${ctx.session.convert_settings}\n\n`;
		} else if(ctx.session.url !== '') {
			this.settings = `üì• –í–∞—à–∞ –ø–æ—á—Ç–∞:\n‚Üí ${ctx.session.email}\n`+
		`#Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É:\n‚Üí ${ctx.session.convert_to}\n`+
		`#Ô∏è‚É£ –í–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞:\n‚Üí ${ctx.session.url}\n`+
		`#Ô∏è‚É£ –í—ã–±–æ—Ä–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏:\n‚Üí ${ctx.session.convert_settings}\n\n`;
		}
	}
}